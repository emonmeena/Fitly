{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport IconButton from \"../../IconButton\";\nexport var ICON_SIZE = 24;\nvar ICON_OFFSET = 12;\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {}\n});\n\nvar IconAdornment = function IconAdornment(_ref2) {\n  var icon = _ref2.icon,\n      topPosition = _ref2.topPosition,\n      side = _ref2.side,\n      isTextInputFocused = _ref2.isTextInputFocused,\n      forceFocus = _ref2.forceFocus;\n\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\nvar TextInputIcon = function TextInputIcon(_ref) {\n  var name = _ref.name,\n      onPress = _ref.onPress,\n      forceTextInputFocus = _ref.forceTextInputFocus,\n      rest = _objectWithoutProperties(_ref, [\"name\", \"onPress\", \"forceTextInputFocus\"]);\n\n  var _React$useContext = React.useContext(StyleContext),\n      style = _React$useContext.style,\n      isTextInputFocused = _React$useContext.isTextInputFocused,\n      forceFocus = _React$useContext.forceFocus;\n\n  var onPressWithFocusControl = React.useCallback(function () {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: name,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl\n  }, rest)));\n};\n\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\nexport { IconAdornment };","map":{"version":3,"sources":["TextInputIcon.tsx"],"names":["ICON_SIZE","ICON_OFFSET","StyleContext","style","isTextInputFocused","forceFocus","IconAdornment","top","contextState","TextInputIcon","forceTextInputFocus","rest","React","onPressWithFocusControl","onPress","styles","container","position","width","height","justifyContent","alignItems","iconButton","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton';\nimport type { $Omit } from '../../../../src/types';\nimport type { IconSource } from '../../Icon';\n\ntype Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme'\n> & {\n  name: IconSource;\n  onPress?: () => void;\n  forceTextInputFocus?: boolean;\n  style?: StyleProp<ViewStyle>;\n  theme?: ReactNativePaper.Theme;\n};\n\nexport const ICON_SIZE = 24;\nconst ICON_OFFSET = 12;\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } = React.useContext(\n    StyleContext\n  );\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}