{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"../ActivityIndicator\";\nimport FABGroup from \"./FABGroup\";\nimport Surface from \"../Surface\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\n\nvar FAB = function (_React$Component) {\n  _inherits(FAB, _React$Component);\n\n  var _super = _createSuper(FAB);\n\n  function FAB() {\n    var _this;\n\n    _classCallCheck(this, FAB);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      visibility: new Animated.Value(_this.props.visible ? 1 : 0)\n    });\n\n    return _this;\n  }\n\n  _createClass(FAB, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var scale = this.props.theme.animation.scale;\n\n      if (this.props.visible === prevProps.visible) {\n        return;\n      }\n\n      if (this.props.visible) {\n        Animated.timing(this.state.visibility, {\n          toValue: 1,\n          duration: 200 * scale,\n          useNativeDriver: true\n        }).start();\n      } else {\n        Animated.timing(this.state.visibility, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          small = _this$props.small,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          uppercase = _this$props.uppercase,\n          _this$props$accessibi = _this$props.accessibilityLabel,\n          accessibilityLabel = _this$props$accessibi === void 0 ? label : _this$props$accessibi,\n          accessibilityState = _this$props.accessibilityState,\n          _this$props$animated = _this$props.animated,\n          animated = _this$props$animated === void 0 ? true : _this$props$animated,\n          customColor = _this$props.color,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          visible = _this$props.visible,\n          loading = _this$props.loading,\n          testID = _this$props.testID,\n          rest = _objectWithoutProperties(_this$props, [\"small\", \"icon\", \"label\", \"uppercase\", \"accessibilityLabel\", \"accessibilityState\", \"animated\", \"color\", \"disabled\", \"onPress\", \"onLongPress\", \"theme\", \"style\", \"visible\", \"loading\", \"testID\"]);\n\n      var visibility = this.state.visibility;\n      var IconComponent = animated ? CrossFadeIcon : Icon;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref$backgroundColor;\n\n      var foregroundColor;\n\n      if (typeof customColor !== 'undefined') {\n        foregroundColor = customColor;\n      } else if (disabled) {\n        foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else {\n        foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n      }\n\n      var rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n      return React.createElement(Surface, _extends({}, rest, {\n        style: [{\n          backgroundColor: backgroundColor,\n          opacity: visibility,\n          transform: [{\n            scale: visibility\n          }]\n        }, styles.container, disabled && styles.disabled, style],\n        pointerEvents: visible ? 'auto' : 'none'\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        rippleColor: rippleColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityState: _objectSpread(_objectSpread({}, accessibilityState), {}, {\n          disabled: disabled\n        }),\n        style: styles.touchable,\n        testID: testID\n      }, React.createElement(View, {\n        style: [styles.content, label ? styles.extended : small ? styles.small : styles.standard],\n        pointerEvents: \"none\"\n      }, icon && loading !== true ? React.createElement(IconComponent, {\n        source: icon,\n        size: 24,\n        color: foregroundColor\n      }) : null, loading ? React.createElement(ActivityIndicator, {\n        size: 18,\n        color: foregroundColor\n      }) : null, label ? React.createElement(Text, {\n        style: [styles.label, uppercase && styles.uppercaseLabel, _objectSpread({\n          color: foregroundColor\n        }, theme.fonts.medium)]\n      }, label) : null)));\n    }\n  }]);\n\n  return FAB;\n}(React.Component);\n\n_defineProperty(FAB, \"Group\", FABGroup);\n\n_defineProperty(FAB, \"defaultProps\", {\n  uppercase: true,\n  visible: true\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6\n  },\n  touchable: {\n    borderRadius: 28\n  },\n  standard: {\n    height: 56,\n    width: 56\n  },\n  small: {\n    height: 40,\n    width: 40\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  label: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  disabled: {\n    elevation: 0\n  }\n});\nexport default withTheme(FAB);","map":{"version":3,"sources":["FAB.tsx"],"names":["FAB","React","FABGroup","uppercase","visible","visibility","Animated","scale","prevProps","toValue","duration","useNativeDriver","accessibilityLabel","animated","color","testID","IconComponent","disabledColor","theme","backgroundColor","disabled","accent","StyleSheet","foregroundColor","rippleColor","opacity","transform","styles","label","small","loading","container","borderRadius","elevation","touchable","standard","height","width","extended","paddingHorizontal","content","flexDirection","alignItems","justifyContent","marginHorizontal","uppercaseLabel","textTransform","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { Animated, View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport FABGroup, { FABGroup as _FABGroup } from './FABGroup';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\nimport type { IconSource } from './../Icon';\nimport type { AccessibilityState } from 'react-native';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\ntype State = {\n  visibility: Animated.Value;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nclass FAB extends React.Component<Props, State> {\n  // @component ./FABGroup.tsx\n  static Group = FABGroup;\n\n  static defaultProps = {\n    uppercase: true,\n    visible: true,\n  };\n\n  state = {\n    visibility: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { scale } = this.props.theme.animation;\n    if (this.props.visible === prevProps.visible) {\n      return;\n    }\n\n    if (this.props.visible) {\n      Animated.timing(this.state.visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(this.state.visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const {\n      small,\n      icon,\n      label,\n      uppercase,\n      accessibilityLabel = label,\n      accessibilityState,\n      animated = true,\n      color: customColor,\n      disabled,\n      onPress,\n      onLongPress,\n      theme,\n      style,\n      visible,\n      loading,\n      testID,\n      ...rest\n    } = this.props;\n    const { visibility } = this.state;\n\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n      StyleSheet.flatten(style) || {};\n\n    let foregroundColor;\n\n    if (typeof customColor !== 'undefined') {\n      foregroundColor = customColor;\n    } else if (disabled) {\n      foregroundColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else {\n      foregroundColor = !color(backgroundColor).isLight()\n        ? white\n        : 'rgba(0, 0, 0, .54)';\n    }\n\n    const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        {...rest}\n        style={\n          [\n            {\n              backgroundColor,\n              opacity: visibility,\n              transform: [\n                {\n                  scale: visibility,\n                },\n              ],\n            },\n            styles.container,\n            disabled && styles.disabled,\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={visible ? 'auto' : 'none'}\n      >\n        <TouchableRipple\n          borderless\n          onPress={onPress}\n          onLongPress={onLongPress}\n          rippleColor={rippleColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ ...accessibilityState, disabled }}\n          style={styles.touchable}\n          testID={testID}\n        >\n          <View\n            style={[\n              styles.content,\n              label ? styles.extended : small ? styles.small : styles.standard,\n            ]}\n            pointerEvents=\"none\"\n          >\n            {icon && loading !== true ? (\n              <IconComponent source={icon} size={24} color={foregroundColor} />\n            ) : null}\n            {loading ? (\n              <ActivityIndicator size={18} color={foregroundColor} />\n            ) : null}\n            {label ? (\n              <Text\n                style={[\n                  styles.label,\n                  uppercase && styles.uppercaseLabel,\n                  { color: foregroundColor, ...theme.fonts.medium },\n                ]}\n              >\n                {label}\n              </Text>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n"]},"metadata":{},"sourceType":"module"}