{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar INDETERMINATE_DURATION = 2000;\nvar INDETERMINATE_MAX_WIDTH = 0.6;\nvar isRTL = I18nManager.isRTL;\n\nvar ProgressBar = function ProgressBar(_ref) {\n  var color = _ref.color,\n      indeterminate = _ref.indeterminate,\n      style = _ref.style,\n      _ref$progress = _ref.progress,\n      progress = _ref$progress === void 0 ? 0 : _ref$progress,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"indeterminate\", \"style\", \"progress\", \"visible\", \"theme\"]);\n\n  var _React$useRef = React.useRef(new Animated.Value(0)),\n      timer = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(0)),\n      fade = _React$useRef2.current;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      width = _React$useState2[0],\n      setWidth = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevWidth = _React$useState4[0],\n      setPrevWidth = _React$useState4[1];\n\n  var indeterminateAnimation = React.useRef(null);\n  var scale = theme.animation.scale;\n  var startAnimation = React.useCallback(function () {\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false\n        });\n      }\n\n      timer.setValue(0);\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n  var stopAnimation = React.useCallback(function () {\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n  }, [fade, scale]);\n  React.useEffect(function () {\n    if (visible) startAnimation();else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n  React.useEffect(function () {\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  var onLayout = function onLayout(event) {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  var tintColor = color || theme.colors.primary;\n  var trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n  return React.createElement(View, _extends({\n    onLayout: onLayout\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\"\n  }), React.createElement(Animated.View, {\n    style: [styles.container, {\n      backgroundColor: trackTintColor,\n      opacity: fade\n    }, style]\n  }, React.createElement(Animated.View, {\n    style: [styles.progressBar, {\n      backgroundColor: tintColor,\n      width: width,\n      transform: [{\n        translateX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n        })\n      }, {\n        scaleX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [0.0001, 1]\n        })\n      }]\n    }]\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","ProgressBar","progress","visible","theme","rest","current","timer","React","Animated","fade","indeterminateAnimation","scale","startAnimation","duration","toValue","useNativeDriver","isInteraction","Platform","stopAnimation","prevWidth","onLayout","event","setPrevWidth","setWidth","tintColor","color","trackTintColor","setColor","styles","backgroundColor","opacity","width","transform","translateX","indeterminate","inputRange","outputRange","scaleX","container","height","overflow","progressBar","flex","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\n  const [width, setWidth] = React.useState<number>(0);\n  const [prevWidth, setPrevWidth] = React.useState<number>(0);\n\n  const indeterminateAnimation = React.useRef<Animated.CompositeAnimation | null>(\n    null\n  );\n\n  const { scale } = theme.animation;\n\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }, [fade, scale]);\n\n  React.useEffect(() => {\n    if (visible) startAnimation();\n    else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n  return (\n    <View\n      onLayout={onLayout}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          { backgroundColor: trackTintColor, opacity: fade },\n          style,\n        ]}\n      >\n        <Animated.View\n          style={[\n            styles.progressBar,\n            {\n              backgroundColor: tintColor,\n              width,\n              transform: [\n                {\n                  translateX: timer.interpolate(\n                    indeterminate\n                      ? {\n                          inputRange: [0, 0.5, 1],\n                          outputRange: [\n                            (isRTL ? 1 : -1) * 0.5 * width,\n                            (isRTL ? 1 : -1) *\n                              0.5 *\n                              INDETERMINATE_MAX_WIDTH *\n                              width,\n                            (isRTL ? -1 : 1) * 0.7 * width,\n                          ],\n                        }\n                      : {\n                          inputRange: [0, 1],\n                          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                        }\n                  ),\n                },\n                {\n                  // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                  scaleX: timer.interpolate(\n                    indeterminate\n                      ? {\n                          inputRange: [0, 0.5, 1],\n                          outputRange: [\n                            0.0001,\n                            INDETERMINATE_MAX_WIDTH,\n                            0.0001,\n                          ],\n                        }\n                      : {\n                          inputRange: [0, 1],\n                          outputRange: [0.0001, 1],\n                        }\n                  ),\n                },\n              ],\n            },\n          ]}\n        />\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}