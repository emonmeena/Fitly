{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress } from \"./utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport RadioButton from \"./RadioButton\";\nimport Text from \"../Typography/Text\";\n\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n      label = _ref.label,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      onPress = _ref.onPress,\n      disabled = _ref.disabled,\n      color = _ref.color,\n      uncheckedColor = _ref.uncheckedColor,\n      status = _ref.status,\n      colors = _ref.theme.colors,\n      accessibilityLabel = _ref.accessibilityLabel,\n      testID = _ref.testID;\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    return React.createElement(TouchableRipple, {\n      onPress: disabled ? undefined : function () {\n        return handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      testID: testID\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, React.createElement(Text, {\n      style: [styles.label, {\n        color: colors.text\n      }, labelStyle]\n    }, label), React.createElement(RadioButton, {\n      value: value,\n      disabled: disabled,\n      status: status,\n      color: color,\n      uncheckedColor: uncheckedColor\n    })));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withTheme(RadioButtonItem);\nexport { RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["RadioButtonItem","theme","colors","testID","context","disabled","handlePress","onPress","onValueChange","value","styles","color","text","uncheckedColor","withTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAQA,SAAA,SAAA;AACA,SAAA,kBAAA;AACA,SAAA,WAAA;AACA,OAAA,eAAA;AACA,OAAA,WAAA;AACA,OAAA,IAAA;;AAkFA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAC,UAAD,QAAC,UAAD;AAAA,MAAC,OAAD,QAAC,OAAD;AAAA,MAAC,QAAD,QAAC,QAAD;AAAA,MAAC,KAAD,QAAC,KAAD;AAAA,MAAC,cAAD,QAAC,cAAD;AAAA,MAAC,MAAD,QAAC,MAAD;AAAA,MAUbE,MAVa,QAUtBD,KAVsB,CAUbC,MAVa;AAAA,MAAC,kBAAD,QAAC,kBAAD;AAAA,MAYtBC,MAZsB,QAYtBA,MAZsB;AAAA,SActB,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA,IAAA,EACIC,UAAAA,OAAD,EAAsC;AACrC,WACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AACE,MAAA,OAAO,EACLC,QAAQ,GAAA,SAAA,GAEJ;AAAA,eACEC,WAAW,CAAC;AACVC,UAAAA,OAAO,EADG,OAAA;AAEVC,UAAAA,aAAa,EAAEJ,OAAF,KAAA,IAAEA,IAAAA,OAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,OAAO,CAFZ,aAAA;AAGVK,UAAAA,KAAAA,EAAAA;AAHU,SAAD,CADb;AAAA,OAJR;AAWE,MAAA,kBAAkB,EAXpB,kBAAA;AAYE,MAAA,MAAM,EAAEN;AAZV,KAAA,EAcE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE,CAACO,MAAM,CAAP,SAAA,EAAb,KAAa,CAAb;AAAwC,MAAA,aAAa,EAAC;AAAtD,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAE,CAACA,MAAM,CAAP,KAAA,EAAe;AAAEC,QAAAA,KAAK,EAAET,MAAM,CAACU;AAAhB,OAAf,EAAA,UAAA;AAAb,KAAA,EADF,KACE,CADF,EAIE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;AACE,MAAA,KAAK,EADP,KAAA;AAEE,MAAA,QAAQ,EAFV,QAAA;AAGE,MAAA,MAAM,EAHR,MAAA;AAIE,MAAA,KAAK,EAJP,KAAA;AAKE,MAAA,cAAc,EAAEC;AALlB,KAAA,CAJF,CAdF,CADF;AAhBN,GAcE,CAdsB;AAAA,CAAxB;;AAiDAb,eAAe,CAAfA,WAAAA,GAAAA,kBAAAA;AAEA,eAAec,SAAS,CAAxB,eAAwB,CAAxB;AAGA,SAAA,eAAA;AAEA,IAAMJ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EAAE;AADL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n}: Props) => (\n  <RadioButtonContext.Consumer>\n    {(context?: RadioButtonContextType) => {\n      return (\n        <TouchableRipple\n          onPress={\n            disabled\n              ? undefined\n              : () =>\n                  handlePress({\n                    onPress: onPress,\n                    onValueChange: context?.onValueChange,\n                    value,\n                  })\n          }\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n        >\n          <View style={[styles.container, style]} pointerEvents=\"none\">\n            <Text style={[styles.label, { color: colors.text }, labelStyle]}>\n              {label}\n            </Text>\n            <RadioButton\n              value={value}\n              disabled={disabled}\n              status={status}\n              color={color}\n              uncheckedColor={uncheckedColor}\n            />\n          </View>\n        </TouchableRipple>\n      );\n    }}\n  </RadioButtonContext.Consumer>\n);\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nexport { RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}