{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar LabelBackground = function LabelBackground(_ref) {\n  var parentState = _ref.parentState,\n      _ref$labelProps = _ref.labelProps,\n      placeholderStyle = _ref$labelProps.placeholderStyle,\n      baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,\n      topPosition = _ref$labelProps.topPosition,\n      hasActiveOutline = _ref$labelProps.hasActiveOutline,\n      label = _ref$labelProps.label,\n      backgroundColor = _ref$labelProps.backgroundColor,\n      labelStyle = _ref.labelStyle;\n  var hasFocus = hasActiveOutline || parentState.value;\n  var opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [-baseLabelTranslateX, 0]\n      })\n    }]\n  };\n  return label ? [React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      opacity: opacity\n    }, labelTranslationX]\n  }), React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {\n      top: topPosition + 1,\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      transform: [].concat(_toConsumableArray(labelStyle.transform), [{\n        scaleY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.2, 1]\n        })\n      }])\n    }],\n    numberOfLines: 1\n  }, label)] : null;\n};\n\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 8,\n    height: 2\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  }\n});","map":{"version":3,"sources":["LabelBackground.tsx"],"names":["LabelBackground","labelProps","backgroundColor","labelStyle","hasFocus","hasActiveOutline","parentState","opacity","inputRange","outputRange","labelTranslationX","transform","translateX","label","StyleSheet","styles","top","topPosition","scaleY","view","position","left","width","height","outlinedLabel","paddingHorizontal","color"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAGA,OAAA,YAAA;;AAIA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAWI;AAAA,MAXH,WAWG,QAXH,WAWG;AAAA,6BAT1BC,UAS0B;AAAA,MATd,gBASc,mBATd,gBASc;AAAA,MATd,mBASc,mBATd,mBASc;AAAA,MATd,WASc,mBATd,WASc;AAAA,MATd,gBASc,mBATd,gBASc;AAAA,MATd,KASc,mBATd,KASc;AAAA,MAHxBC,eAGwB,mBAHxBA,eAGwB;AAAA,MAD1BC,UAC0B,QAD1BA,UAC0B;AAC1B,MAAMC,QAAQ,GAAGC,gBAAgB,IAAIC,WAAW,CAAhD,KAAA;AACA,MAAMC,OAAO,GAAG,WAAW,CAAX,OAAA,CAAA,WAAA,CAAgC;AAC9CC,IAAAA,UAAU,EAAE,CAAA,CAAA,EADkC,CAClC,CADkC;AAE9CC,IAAAA,WAAW,EAAE,CAACL,QAAQ,GAAA,CAAA,GAAT,CAAA,EAAA,CAAA;AAFiC,GAAhC,CAAhB;AAKA,MAAMM,iBAAiB,GAAG;AACxBC,IAAAA,SAAS,EAAE,CACT;AACEC,MAAAA,UAAU,EAAE,WAAW,CAAX,OAAA,CAAA,WAAA,CAAgC;AAC1CJ,QAAAA,UAAU,EAAE,CAAA,CAAA,EAD8B,CAC9B,CAD8B;AAE1CC,QAAAA,WAAW,EAAE,CAAC,CAAD,mBAAA,EAAA,CAAA;AAF6B,OAAhC;AADd,KADS;AADa,GAA1B;AAWA,SAAOI,KAAK,GACR,CACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,GAAG,EADL,sBAAA;AAEE,IAAA,aAAa,EAFf,MAAA;AAGE,IAAA,KAAK,EAAE,CACLC,UAAU,CADL,YAAA,EAELC,MAAM,CAFD,IAAA,EAGL;AACEb,MAAAA,eADF,EACEA,eADF;AAEEK,MAAAA,OAAAA,EAAAA;AAFF,KAHK,EAAA,iBAAA;AAHT,GAAA,CADF,EAcE,KAAA,CAAA,aAAA,CAAA,YAAA,EAAA;AACE,IAAA,GAAG,EADL,sBAAA;AAEE,IAAA,KAAK,EAAE,CAAA,gBAAA,EAAA,UAAA,EAGLQ,MAAM,CAHD,aAAA,EAIL;AACEC,MAAAA,GAAG,EAAEC,WAAW,GADlB,CAAA;AAEEf,MAAAA,eAFF,EAEEA,eAFF;AAGEK,MAAAA,OAHF,EAGEA,OAHF;AAIEI,MAAAA,SAAS,+BACJR,UAAU,CADJ,SAAF,IAEP;AACEe,QAAAA,MAAM,EAAE,WAAW,CAAX,OAAA,CAAA,WAAA,CAAgC;AACtCV,UAAAA,UAAU,EAAE,CAAA,CAAA,EAD0B,CAC1B,CAD0B;AAEtCC,UAAAA,WAAW,EAAE,CAAA,GAAA,EAAA,CAAA;AAFyB,SAAhC;AADV,OAFO;AAJX,KAJK,CAFT;AAqBE,IAAA,aAAa,EAAE;AArBjB,GAAA,EAfM,KAeN,CAdF,CADQ,GAAZ,IAAA;AA7BF,CAAA;;AAyEA,eAAA,eAAA;AAEA,IAAMM,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BI,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EADJ,UAAA;AAEJJ,IAAAA,GAAG,EAFC,CAAA;AAGJK,IAAAA,IAAI,EAHA,EAAA;AAIJC,IAAAA,KAAK,EAJD,CAAA;AAKJC,IAAAA,MAAM,EAAE;AALJ,GADyB;AAQ/BC,EAAAA,aAAa,EAAE;AACbJ,IAAAA,QAAQ,EADK,UAAA;AAEbC,IAAAA,IAAI,EAFS,EAAA;AAGbI,IAAAA,iBAAiB,EAHJ,CAAA;AAIbC,IAAAA,KAAK,EAAE;AAJM;AARgB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n  },\n  labelStyle,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n\n  const labelTranslationX = {\n    transform: [\n      {\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              opacity,\n            },\n            labelTranslationX,\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            {\n              top: topPosition + 1,\n              backgroundColor,\n              opacity,\n              transform: [\n                ...labelStyle.transform,\n                {\n                  scaleY: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.2, 1],\n                  }),\n                },\n              ],\n            },\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 8,\n    height: 2,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}