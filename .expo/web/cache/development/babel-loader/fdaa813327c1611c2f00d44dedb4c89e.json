{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, [\"elevation\", \"onLongPress\", \"onPress\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"]);\n\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var handlePressIn = function handlePressIn() {\n    var dark = theme.dark,\n        mode = theme.mode,\n        scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  var handlePressOut = function handlePressOut() {\n    var dark = theme.dark,\n        mode = theme.mode,\n        scale = theme.animation.scale;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  var roundness = theme.roundness;\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: elevation\n    }, style]\n  }, rest), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress ? handlePressIn : undefined,\n    onPressOut: onPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","accessible","rest","current","React","Animated","handlePressIn","animation","scale","toValue","duration","useNativeDriver","mode","handlePressOut","roundness","total","siblings","child","borderRadius","onPress","styles","innerContainer","index","flexGrow","flexShrink","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface\n      // @ts-ignore\n      style={[{ borderRadius: roundness, elevation }, style]}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}