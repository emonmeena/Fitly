{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListItem = function ListItem(_ref) {\n  var left = _ref.left,\n      right = _ref.right,\n      title = _ref.title,\n      description = _ref.description,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      titleStyle = _ref.titleStyle,\n      _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n      descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n      titleEllipsizeMode = _ref.titleEllipsizeMode,\n      descriptionEllipsizeMode = _ref.descriptionEllipsizeMode,\n      descriptionStyle = _ref.descriptionStyle,\n      rest = _objectWithoutProperties(_ref, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"descriptionNumberOfLines\", \"titleEllipsizeMode\", \"descriptionEllipsizeMode\", \"descriptionStyle\"]);\n\n  var renderDescription = function renderDescription(descriptionColor, description) {\n    return typeof description === 'function' ? description({\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : React.createElement(Text, {\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle]\n    }, description);\n  };\n\n  var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    style: [styles.container, style],\n    onPress: onPress\n  }), React.createElement(View, {\n    style: styles.row\n  }, left ? left({\n    color: descriptionColor,\n    style: description ? styles.iconMarginLeft : _objectSpread(_objectSpread({}, styles.iconMarginLeft), styles.marginVerticalNone)\n  }) : null, React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, React.createElement(Text, {\n    ellipsizeMode: titleEllipsizeMode,\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: titleColor\n    }, titleStyle]\n  }, title), description ? renderDescription(descriptionColor, description) : null), right ? right({\n    color: descriptionColor,\n    style: description ? styles.iconMarginRight : _objectSpread(_objectSpread({}, styles.iconMarginRight), styles.marginVerticalNone)\n  }) : null));\n};\n\nListItem.displayName = 'List.Item';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","titleNumberOfLines","descriptionNumberOfLines","descriptionStyle","rest","renderDescription","description","ellipsizeMode","color","fontSize","styles","descriptionColor","titleColor","theme","onPress","row","left","style","right","container","padding","flexDirection","title","marginVerticalNone","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}