{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport shadow from \"../styles/shadow\";\nimport { withTheme } from \"../core/theming\";\nimport overlay from \"../styles/overlay\";\n\nvar Surface = function Surface(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"theme\"]);\n\n  var flattenedStyles = StyleSheet.flatten(style) || {};\n  var _flattenedStyles$elev = flattenedStyles.elevation,\n      elevation = _flattenedStyles$elev === void 0 ? 4 : _flattenedStyles$elev;\n  var isDarkTheme = theme.dark,\n      mode = theme.mode,\n      colors = theme.colors;\n  return React.createElement(Animated.View, _extends({}, rest, {\n    style: [{\n      backgroundColor: isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.surface\n    }, elevation && shadow(elevation), style]\n  }));\n};\n\nexport default withTheme(Surface);","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","theme","rest","flattenedStyles","StyleSheet","elevation","dark","colors","backgroundColor","isDarkTheme","mode","overlay","surface","shadow","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;AAEA,OAAA,MAAA;AACA,SAAA,SAAA;AACA,OAAA,OAAA;;AAyDA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAAsC;AAAA,MAArC,KAAqC,GAAA,IAAA,CAArC,KAAqC;AAAA,MAA5BC,KAA4B,GAAA,IAAA,CAA5BA,KAA4B;AAAA,MAAlBC,IAAkB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;AACpD,MAAMC,eAAe,GAAGC,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAAxB,EAAA;AADoD,8BAEpD,eAFoD,CAE5CC,SAF4C;AAAA,MAE5CA,SAF4C,sCAEhC,CAFgC;AAAA,MAG9C,WAH8C,GAGpD,KAHoD,CAG5CC,IAH4C;AAAA,MAG9C,IAH8C,GAGpD,KAHoD,CAG9C,IAH8C;AAAA,MAGnBC,MAHmB,GAGpD,KAHoD,CAGnBA,MAHmB;AAIpD,SAEE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,eAAe,EACbC,WAAW,IAAIC,IAAI,KAAnBD,UAAAA,GACIE,OAAO,CAAA,SAAA,EAAYJ,MAAM,CAD7BE,OACW,CADXA,GAEIF,MAAM,CAACK;AAJf,KADK,EAOLP,SAAS,IAAIQ,MAAM,CAPd,SAOc,CAPd,EAAA,KAAA;AAFT,GAAA,CAAA,CAFF;AAJF,CAAA;;AAsBA,eAAeC,SAAS,CAAxB,OAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nconst Surface = ({ style, theme, ...rest }: Props) => {\n  const flattenedStyles = StyleSheet.flatten(style) || {};\n  const { elevation = 4 }: ViewStyle = flattenedStyles;\n  const { dark: isDarkTheme, mode, colors } = theme;\n  return (\n    // @ts-ignore\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors.surface)\n              : colors.surface,\n        },\n        elevation && shadow(elevation),\n        style,\n      ]}\n    />\n  );\n};\n\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"module"}