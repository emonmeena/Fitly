{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from \"./helpers\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { AdornmentSide, AdornmentType } from \"./Adornment/enums\";\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\n\nvar TextInputFlat = function (_React$Component) {\n  _inherits(TextInputFlat, _React$Component);\n\n  var _super = _createSuper(TextInputFlat);\n\n  function TextInputFlat() {\n    _classCallCheck(this, TextInputFlat);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextInputFlat, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          forceFocus = _this$props.forceFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n          left = _this$props.left,\n          right = _this$props.right,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          paddingHorizontal = _ref.paddingHorizontal,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n\n      var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n        adornmentConfig: adornmentConfig\n      }),\n          paddingLeft = _calculateFlatInputHo.paddingLeft,\n          paddingRight = _calculateFlatInputHo.paddingRight;\n\n      if (isPaddingHorizontalPassed) {\n        paddingLeft = paddingHorizontal;\n        paddingRight = paddingHorizontal;\n      }\n\n      var leftLayout = parentState.leftLayout,\n          rightLayout = parentState.rightLayout;\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        inputOffset: FLAT_INPUT_OFFSET\n      });\n      var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        underlineColorCustom = 'transparent';\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = colors.placeholder;\n        errorColor = colors.error;\n        underlineColorCustom = underlineColor || colors.disabled;\n      }\n\n      var containerStyle = {\n        backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n        borderTopLeftRadius: theme.roundness,\n        borderTopRightRadius: theme.roundness\n      };\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n      var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: FLAT_INPUT_OFFSET,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n      var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n      var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: leftLayout.height\n      })) : null;\n      var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n        height: flatHeight\n      }, paddingFlat), {}, {\n        affixHeight: rightLayout.height\n      })) : null;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        paddingOffset: {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        },\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        errorColor: errorColor\n      };\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: this.props.parentState.focused\n      };\n\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n\n      return React.createElement(View, {\n        style: [containerStyle, viewStyle]\n      }, React.createElement(Underline, {\n        parentState: parentState,\n        underlineColorCustom: underlineColorCustom,\n        error: error,\n        colors: colors,\n        activeColor: activeColor\n      }), React.createElement(View, {\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0,\n          minHeight: minHeight\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, {\n          paddingLeft: paddingLeft,\n          paddingRight: paddingRight\n        }, !multiline || multiline && height ? {\n          height: flatHeight\n        } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        }), adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps));\n    }\n  }]);\n\n  return TextInputFlat;\n}(React.Component);\n\n_defineProperty(TextInputFlat, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\n\nexport default TextInputFlat;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","React","disabled","error","multiline","editable","render","props","placeholderTextColor","fonts","font","hasActiveOutline","parentState","fontSize","paddingHorizontal","StyleSheet","fontSizeStyle","isPaddingHorizontalPassed","adornmentConfig","getAdornmentConfig","left","right","paddingRight","calculateFlatInputHorizontalPadding","paddingLeft","rightLayout","rightAffixWidth","leftAffixWidth","leftLayout","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","FLAT_INPUT_OFFSET","inputTextColor","activeColor","color","colors","placeholderColor","underlineColorCustom","errorColor","underlineColor","containerStyle","backgroundColor","theme","borderTopLeftRadius","borderTopRightRadius","roundness","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","label","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","paddingOffset","affixTopPosition","AdornmentSide","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","AdornmentType","isTextInputFocused","focused","textStyle","visible","labeled","paddingTop","paddingBottom","ref","onChangeText","placeholder","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","Underline","transform","scaleY","position","underline","bottom","input","flexGrow","margin","textAlign","zIndex","inputFlat","inputFlatDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nclass TextInputFlat extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      paddingHorizontal,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    const isPaddingHorizontalPassed =\n      paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n    const adornmentConfig = getAdornmentConfig({\n      left,\n      right,\n    });\n\n    let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n      adornmentConfig,\n    });\n\n    if (isPaddingHorizontalPassed) {\n      paddingLeft = paddingHorizontal as number;\n      paddingRight = paddingHorizontal as number;\n    }\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        inputOffset: FLAT_INPUT_OFFSET,\n      }\n    );\n\n    let inputTextColor,\n      activeColor,\n      underlineColorCustom,\n      placeholderColor,\n      errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      underlineColorCustom = 'transparent';\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = colors.placeholder;\n      errorColor = colors.error;\n      underlineColorCustom = underlineColor || colors.disabled;\n    }\n\n    const containerStyle = {\n      backgroundColor: theme.dark\n        ? color(colors.background).lighten(0.24).rgb().string()\n        : color(colors.background).darken(0.06).rgb().string(),\n      borderTopLeftRadius: theme.roundness,\n      borderTopRightRadius: theme.roundness,\n    };\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n        (labelHalfWidth - (labelScale * labelWidth) / 2) +\n      (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n    const minInputHeight = dense\n      ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) -\n        LABEL_PADDING_TOP_DENSE\n      : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: FLAT_INPUT_OFFSET,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputFlatDense : styles.inputFlat\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingFlat = adjustPaddingFlat({\n      ...paddingSettings,\n      pad,\n    });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const minHeight =\n      height ||\n      (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n    const flatHeight =\n      inputHeight +\n      (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n    const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n    const leftAffixTopPosition = leftLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: leftLayout.height,\n        })\n      : null;\n\n    const rightAffixTopPosition = rightLayout.height\n      ? calculateFlatAffixTopPosition({\n          height: flatHeight,\n          ...paddingFlat,\n          affixHeight: rightLayout.height,\n        })\n      : null;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      paddingOffset: { paddingLeft, paddingRight },\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      errorColor,\n    };\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Affix]: affixTopPosition,\n        [AdornmentType.Icon]: iconTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: this.props.parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={[containerStyle, viewStyle]}>\n        <Underline\n          parentState={parentState}\n          underlineColorCustom={underlineColorCustom}\n          error={error}\n          colors={colors}\n          activeColor={activeColor}\n        />\n        <View\n          style={{\n            paddingTop: 0,\n            paddingBottom: 0,\n            minHeight,\n          }}\n        >\n          <InputLabel parentState={parentState} labelProps={labelProps} />\n          {render?.({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            // @ts-ignore\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              { paddingLeft, paddingRight },\n              !multiline || (multiline && height) ? { height: flatHeight } : {},\n              paddingFlat,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n              },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          })}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    );\n  }\n}\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}