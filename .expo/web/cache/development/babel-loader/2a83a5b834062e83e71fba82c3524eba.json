{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"./Typography/AnimatedText\";\nimport { withTheme } from \"../core/theming\";\n\nvar HelperText = function HelperText(_ref) {\n  var style = _ref.style,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'info' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      onLayout = _ref.onLayout,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 'normal' : _ref$padding,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"]);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      shown = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(0),\n      textHeight = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  var handleTextLayout = function handleTextLayout(e) {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  var colors = theme.colors,\n      dark = theme.dark;\n  var textColor = type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return React.createElement(AnimatedText, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style]\n  }, rest), rest.children);\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","type","visible","padding","rest","current","shown","React","Animated","textHeight","scale","theme","toValue","duration","useNativeDriver","handleTextLayout","e","onLayout","dark","textColor","colors","color","styles","opacity","transform","translateY","inputRange","outputRange","text","fontSize","paddingVertical","paddingHorizontal","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    //@ts-ignore Animated.Text typings are improved but something is still broken. It thinks onLayout is not callable.\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    // @ts-ignore\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}