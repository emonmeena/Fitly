{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nvar Touchable = function Touchable(_ref) {\n  var _0 = _ref.route,\n      style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = _objectWithoutProperties(_ref, [\"route\", \"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n\n  return TouchableRipple.supported ? React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : React.createElement(TouchableWithoutFeedback, rest, React.createElement(View, {\n    style: style\n  }, children));\n};\n\nvar SceneComponent = function (_React$PureComponent) {\n  _inherits(SceneComponent, _React$PureComponent);\n\n  var _super = _createSuper(SceneComponent);\n\n  function SceneComponent() {\n    _classCallCheck(this, SceneComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          rest = _objectWithoutProperties(_this$props, [\"component\"]);\n\n      return React.createElement(component, rest);\n    }\n  }]);\n\n  return SceneComponent;\n}(React.PureComponent);\n\nvar BottomNavigation = function (_React$Component) {\n  _inherits(BottomNavigation, _React$Component);\n\n  var _super2 = _createSuper(BottomNavigation);\n\n  _createClass(BottomNavigation, null, [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref2) {\n        var route = _ref2.route,\n            jumpTo = _ref2.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key ? route.key : ''],\n          route: route,\n          jumpTo: jumpTo\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n          index = _nextProps$navigation.index,\n          routes = _nextProps$navigation.routes;\n      var tabs = routes.map(function (_, i) {\n        return prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(function (_, i) {\n        return prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n      var focusedKey = routes[index].key;\n\n      if (focusedKey === prevState.current) {\n        return nextState;\n      }\n\n      return _objectSpread(_objectSpread({}, nextState), {}, {\n        current: focusedKey,\n        loaded: prevState.loaded.includes(focusedKey) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [focusedKey])\n      });\n    }\n  }]);\n\n  function BottomNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, BottomNavigation);\n\n    _this = _super2.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardShow\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _this.setState({\n        keyboard: true\n      }, function () {\n        return Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardHide\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateToCurrentIndex\", function () {\n      var shifting = _this.isShifting();\n\n      var _this$props2 = _this.props,\n          navigationState = _this$props2.navigationState,\n          scale = _this$props2.theme.animation.scale;\n      var routes = navigationState.routes,\n          index = navigationState.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true\n      })].concat(_toConsumableArray(routes.map(function (_, i) {\n        return Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabPress\", function (index) {\n      var _this$props3 = _this.props,\n          navigationState = _this$props3.navigationState,\n          onTabPress = _this$props3.onTabPress,\n          onIndexChange = _this$props3.onIndexChange;\n      var event = {\n        route: navigationState.routes[index],\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          event.defaultPrevented = true;\n        }\n      };\n      onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"jumpTo\", function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      _this.props.onIndexChange(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isShifting\", function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    });\n\n    var _this$props$navigatio = _this.props.navigationState,\n        _routes = _this$props$navigatio.routes,\n        _index = _this$props$navigatio.index;\n    var focusedKey = _routes[_index].key;\n    _this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(_index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: focusedKey,\n      loaded: [focusedKey],\n      keyboard: false\n    };\n    return _this;\n  }\n\n  _createClass(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateToCurrentIndex();\n\n      if (Platform.OS === 'ios') {\n        Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n      this.animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props4 = this.props,\n          navigationState = _this$props4.navigationState,\n          renderScene = _this$props4.renderScene,\n          renderIcon = _this$props4.renderIcon,\n          renderLabel = _this$props4.renderLabel,\n          _this$props4$renderTo = _this$props4.renderTouchable,\n          renderTouchable = _this$props4$renderTo === void 0 ? function (props) {\n        return React.createElement(Touchable, props);\n      } : _this$props4$renderTo,\n          _this$props4$getLabel = _this$props4.getLabelText,\n          getLabelText = _this$props4$getLabel === void 0 ? function (_ref4) {\n        var route = _ref4.route;\n        return route.title;\n      } : _this$props4$getLabel,\n          _this$props4$getBadge = _this$props4.getBadge,\n          getBadge = _this$props4$getBadge === void 0 ? function (_ref5) {\n        var route = _ref5.route;\n        return route.badge;\n      } : _this$props4$getBadge,\n          _this$props4$getColor = _this$props4.getColor,\n          getColor = _this$props4$getColor === void 0 ? function (_ref6) {\n        var route = _ref6.route;\n        return route.color;\n      } : _this$props4$getColor,\n          _this$props4$getAcces = _this$props4.getAccessibilityLabel,\n          getAccessibilityLabel = _this$props4$getAcces === void 0 ? function (_ref7) {\n        var route = _ref7.route;\n        return route.accessibilityLabel;\n      } : _this$props4$getAcces,\n          _this$props4$getTestI = _this$props4.getTestID,\n          getTestID = _this$props4$getTestI === void 0 ? function (_ref8) {\n        var route = _ref8.route;\n        return route.testID;\n      } : _this$props4$getTestI,\n          activeColor = _this$props4.activeColor,\n          inactiveColor = _this$props4.inactiveColor,\n          keyboardHidesNavigationBar = _this$props4.keyboardHidesNavigationBar,\n          barStyle = _this$props4.barStyle,\n          labeled = _this$props4.labeled,\n          style = _this$props4.style,\n          theme = _this$props4.theme,\n          sceneAnimationEnabled = _this$props4.sceneAnimationEnabled;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          loaded = _this$state.loaded,\n          index = _this$state.index,\n          visible = _this$state.visible,\n          ripple = _this$state.ripple,\n          keyboard = _this$state.keyboard,\n          tabs = _this$state.tabs,\n          offsets = _this$state.offsets;\n      var routes = navigationState.routes;\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n      var shifting = this.isShifting();\n\n      var _ref9 = StyleSheet.flatten(barStyle) || {},\n          customBackground = _ref9.backgroundColor,\n          _ref9$elevation = _ref9.elevation,\n          elevation = _ref9$elevation === void 0 ? 4 : _ref9$elevation;\n\n      var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var backgroundColor = shifting ? index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !color(approxBackgroundColor).isLight();\n      var textColor = isDark ? white : black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n      var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var maxTabBarWidth = maxTabWidth * routes.length;\n      var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n      var tabWidth = tabBarWidth / routes.length;\n      var rippleSize = layout.width / 4;\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, React.createElement(View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }]\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(route.key)) {\n          return null;\n        }\n\n        var focused = navigationState.index === index;\n        var opacity = sceneAnimationEnabled ? tabs[index] : focused ? 1 : 0;\n        var top = offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n        return React.createElement(Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews: Platform.OS === 'ios' ? navigationState.index !== index : true\n        }, React.createElement(Animated.View, {\n          style: [styles.content, {\n            top: top\n          }, Platform.OS === 'web' ? {\n            display: loaded.includes(index.toString()) ? 'flex' : 'none'\n          } : null]\n        }, renderScene({\n          route: route,\n          jumpTo: _this3.jumpTo\n        })));\n      })), React.createElement(Surface, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [layout.height, 0]\n            })\n          }],\n          position: keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboard ? 'none' : 'auto' : 'none',\n        onLayout: this.handleLayout\n      }, React.createElement(Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }]\n      }, React.createElement(SafeAreaView, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabBarWidth\n        }]\n      }, shifting ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: (BAR_HEIGHT - rippleSize) / 2,\n          left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n          height: rippleSize,\n          width: rippleSize,\n          borderRadius: rippleSize / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }]\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = tabs[index];\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return renderTouchable({\n          key: route.key,\n          route: route,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3.handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: 'button',\n          accessibilityRole: 'button',\n          accessibilityState: {\n            selected: true\n          },\n          style: styles.item,\n          children: React.createElement(View, {\n            pointerEvents: \"none\"\n          }, React.createElement(Animated.View, {\n            style: [styles.iconContainer, {\n              transform: [{\n                translateY: translateY\n              }]\n            }]\n          }, React.createElement(Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: activeOpacity\n            }]\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(Icon, {\n            source: route.icon,\n            color: activeTintColor,\n            size: 24\n          })), React.createElement(Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: inactiveOpacity\n            }]\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(Icon, {\n            source: route.icon,\n            color: inactiveTintColor,\n            size: 24\n          })), React.createElement(View, {\n            style: [styles.badgeContainer, {\n              right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n            }]\n          }, typeof badge === 'boolean' ? React.createElement(Badge, {\n            visible: badge,\n            size: 8\n          }) : React.createElement(Badge, {\n            visible: badge != null,\n            size: 16\n          }, badge))), labeled ? React.createElement(Animated.View, {\n            style: [styles.labelContainer, {\n              transform: [{\n                scale: scale\n              }]\n            }]\n          }, React.createElement(Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: activeOpacity\n            }]\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(Text, {\n            style: [styles.label, {\n              color: activeTintColor\n            }]\n          }, getLabelText({\n            route: route\n          }))), shifting ? null : React.createElement(Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: inactiveOpacity\n            }]\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(Text, {\n            style: [styles.label, {\n              color: inactiveTintColor\n            }]\n          }, getLabelText({\n            route: route\n          })))) : React.createElement(View, {\n            style: styles.labelContainer\n          }))\n        });\n      })))));\n    }\n  }]);\n\n  return BottomNavigation;\n}(React.Component);\n\n_defineProperty(BottomNavigation, \"defaultProps\", {\n  labeled: true,\n  keyboardHidesNavigationBar: true,\n  sceneAnimationEnabled: false\n});\n\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap',\n    alignSelf: 'center'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Platform","Touchable","route","rippleColor","TouchableRipple","style","React","component","BottomNavigation","jumpTo","scenes","labeled","keyboardHidesNavigationBar","sceneAnimationEnabled","routes","nextProps","tabs","prevState","Animated","i","offsets","nextState","focusedKey","current","loaded","constructor","index","visible","ripple","touch","layout","height","width","measured","keyboard","Keyboard","prevProps","offset","scale","toValue","duration","useNativeDriver","shifting","theme","animation","finished","tab","e","onIndexChange","event","navigationState","defaultPrevented","preventDefault","onTabPress","key","renderTouchable","props","getLabelText","getBadge","getColor","getAccessibilityLabel","getTestID","dark","mode","backgroundColor","elevation","StyleSheet","approxBackgroundColor","customBackground","isDarkTheme","overlay","colors","inputRange","outputRange","isDark","color","textColor","activeTintColor","inactiveTintColor","touchColor","activeColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","tabWidth","rippleSize","styles","background","focused","opacity","top","display","renderScene","transform","translateY","position","handleLayout","bottom","maxWidth","left","borderRadius","active","activeOpacity","inactiveOpacity","badge","borderless","centered","onPress","testID","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","children","renderIcon","right","String","renderLabel","labelContainer","withTheme","container","flex","overflow","content","bar","barContent","alignItems","items","flexDirection","item","paddingVertical","iconContainer","marginTop","marginHorizontal","alignSelf","iconWrapper","paddingBottom","labelWrapper","label","fontSize","textAlign","whiteSpace","badgeContainer"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value;\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  tabs: Animated.Value[];\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  offsets: Animated.Value[];\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value;\n  /**\n   * Animation for the touch, used to determine it's scale and opacity.\n   */\n  touch: Animated.Value;\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value;\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number; width: number; measured: boolean };\n  /**\n   * key of the currently active route. Used only for getDerivedStateFromProps.\n   */\n  current: string;\n  /**\n   * List of keys of the loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: string[];\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nclass SceneComponent extends React.PureComponent<any> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass BottomNavigation extends React.Component<Props, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minimize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: Route;\n      jumpTo: (key: string) => void;\n    }>;\n  }) {\n    return ({\n      route,\n      jumpTo,\n    }: {\n      route: Route;\n      jumpTo: (key: string) => void;\n    }) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key ? route.key : '']}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n    sceneAnimationEnabled: false,\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: Props,\n    prevState: State\n  ): Partial<State> {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_: any, i: number) =>\n        prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_: any, i: number) =>\n        prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    const focusedKey = routes[index].key;\n\n    if (focusedKey === prevState.current) {\n      return nextState;\n    }\n\n    return {\n      ...nextState,\n      // Store the current index in state so that we can later check if the index has changed\n      current: focusedKey,\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedKey],\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { routes, index } = this.props.navigationState;\n    const focusedKey = routes[index].key;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: focusedKey,\n      loaded: [focusedKey],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this.animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this.animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  private handleKeyboardShow = () => {\n    const { scale } = this.props.theme.animation;\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start()\n    );\n  };\n\n  private handleKeyboardHide = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n  };\n\n  private animateToCurrentIndex = () => {\n    const shifting = this.isShifting();\n    const {\n      navigationState,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { routes, index } = navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's background color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  private handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  private jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      (route) => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  private isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n      getLabelText = ({ route }: { route: Route }) => route.title,\n      getBadge = ({ route }: { route: Route }) => route.badge,\n      getColor = ({ route }: { route: Route }) => route.color,\n      getAccessibilityLabel = ({ route }: { route: Route }) =>\n        route.accessibilityLabel,\n      getTestID = ({ route }: { route: Route }) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n      sceneAnimationEnabled,\n    } = this.props;\n\n    const {\n      layout,\n      loaded,\n      index,\n      visible,\n      ripple,\n      keyboard,\n      tabs,\n      offsets,\n    } = this.state;\n    const { routes } = navigationState;\n    const { colors, dark: isDarkTheme, mode } = theme;\n\n    const shifting = this.isShifting();\n\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n      StyleSheet.flatten(barStyle) || {};\n\n    const approxBackgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n\n    const backgroundColor = shifting\n      ? index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          //@ts-ignore\n          outputRange: routes.map(\n            (route) => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).isLight();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor).alpha(0.5).rgb().string();\n\n    const touchColor = color(activeColor || activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const maxTabBarWidth = maxTabWidth * routes.length;\n\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n    const tabWidth = tabBarWidth / routes.length;\n\n    const rippleSize = layout.width / 4;\n\n    return (\n      <View style={[styles.container, style]}>\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(route.key)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n            const focused = navigationState.index === index;\n\n            const opacity = sceneAnimationEnabled\n              ? tabs[index]\n              : focused\n              ? 1\n              : 0;\n\n            const top = offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View\n                  style={[\n                    styles.content,\n                    { top },\n                    Platform.OS === 'web'\n                      ? {\n                          display: loaded.includes(index.toString())\n                            ? 'flex'\n                            : 'none',\n                        }\n                      : null,\n                  ]}\n                >\n                  {renderScene({\n                    route,\n                    jumpTo: this.jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={\n            [\n              styles.bar,\n              keyboardHidesNavigationBar\n                ? {\n                    // When the keyboard is shown, slide down the navigation bar\n                    transform: [\n                      {\n                        translateY: visible.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [layout.height, 0],\n                        }),\n                      },\n                    ],\n                    // Absolutely position the navigation bar so that the content is below it\n                    // This is needed to avoid gap at bottom when the navigation bar is hidden\n                    position: keyboard ? 'absolute' : null,\n                  }\n                : null,\n              barStyle,\n            ] as StyleProp<ViewStyle>\n          }\n          pointerEvents={\n            layout.measured\n              ? keyboardHidesNavigationBar && keyboard\n                ? 'none'\n                : 'auto'\n              : 'none'\n          }\n          onLayout={this.handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabBarWidth }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: (BAR_HEIGHT - rippleSize) / 2,\n                      left:\n                        tabWidth * (navigationState.index + 0.5) -\n                        rippleSize / 2,\n                      height: rippleSize,\n                      width: rippleSize,\n                      borderRadius: rippleSize / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return renderTouchable({\n                  key: route.key,\n                  route,\n                  borderless: true,\n                  centered: true,\n                  rippleColor: touchColor,\n                  onPress: () => this.handleTabPress(index),\n                  testID: getTestID({ route }),\n                  accessibilityLabel: getAccessibilityLabel({ route }),\n                  accessibilityTraits: focused\n                    ? ['button', 'selected']\n                    : 'button',\n                  accessibilityComponentType: 'button',\n                  accessibilityRole: 'button',\n                  accessibilityState: { selected: true },\n                  style: styles.item,\n                  children: (\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <Text\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <Text\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </Text>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  ),\n                });\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}