{"ast":null,"code":"import color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DarkTheme from \"./DarkTheme\";\nexport default function overlay() {\n  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DarkTheme.colors.surface;\n\n  if (elevation instanceof Animated.Value) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (elevation) {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  }\n\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor, elevation) {\n  var overlayTransparency;\n\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\n\nvar elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"sources":["overlay.tsx"],"names":["elevation","surfaceColor","DarkTheme","Animated","inputRange","outputRange","calculateColor","overlayTransparency","elevationOverlayTransparency","color"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;;AAEA,OAAA,SAAA;AAEA,eAAe,SAAA,OAAA,GAGb;AAAA,MAFAA,SAEA,uEAHa,CAGb;AAAA,MADAC,YACA,uEADuBC,SAAS,CAATA,MAAAA,CAFV,OAGb;;AACA,MAAIF,SAAS,YAAYG,QAAQ,CAAjC,KAAA,EAAyC;AACvC,QAAMC,UAAU,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAnB,EAAmB,CAAnB;AACA,WAAO,SAAS,CAAT,WAAA,CAAsB;AAC3BA,MAAAA,UAD2B,EAC3BA,UAD2B;AAE3BC,MAAAA,WAAW,EAAE,UAAU,CAAV,GAAA,CAAgBL,UAAAA,SAAD,EAAe;AACzC,eAAOM,cAAc,CAAA,YAAA,EAArB,SAAqB,CAArB;AADW,OAAA;AAFc,KAAtB,CAAP;AAMD;;AACD,SAAOA,cAAc,CAAA,YAAA,EAArB,SAAqB,CAArB;AACD;;AACD,SAAA,cAAA,CAAA,YAAA,EAAA,SAAA,EAAiE;AAC/D,MAAA,mBAAA;;AACA,MAAIN,SAAS,IAATA,CAAAA,IAAkBA,SAAS,IAA/B,EAAA,EAAuC;AACrCO,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAlDD,SAAkD,CAAlDA;AADF,GAAA,MAEO,IAAIP,SAAS,GAAb,EAAA,EAAoB;AACzBO,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAlDD,EAAkD,CAAlDA;AADK,GAAA,MAEA;AACLA,IAAAA,mBAAmB,GAAGC,4BAA4B,CAAlDD,CAAkD,CAAlDA;AACD;;AACD,SAAOE,KAAK,CAALA,YAAK,CAALA,CAAAA,GAAAA,CACAA,KAAK,CADLA,OACK,CADLA,EACgBF,mBAAmB,GADnCE,IAAAA,EAAP,GAAOA,EAAP;AAGD;;AACD,IAAMD,4BAAsD,GAAG;AAC7D,KAD6D,CAAA;AAE7D,KAF6D,CAAA;AAG7D,KAH6D,CAAA;AAI7D,KAJ6D,CAAA;AAK7D,KAL6D,EAAA;AAM7D,KAN6D,EAAA;AAO7D,KAP6D,IAAA;AAQ7D,KAR6D,EAAA;AAS7D,KAT6D,IAAA;AAU7D,MAV6D,EAAA;AAW7D,MAX6D,IAAA;AAY7D,MAZ6D,EAAA;AAa7D,MAb6D,KAAA;AAc7D,MAd6D,IAAA;AAe7D,MAf6D,KAAA;AAgB7D,MAhB6D,EAAA;AAiB7D,MAjB6D,KAAA;AAkB7D,MAlB6D,KAAA;AAmB7D,MAnB6D,KAAA;AAoB7D,MApB6D,KAAA;AAqB7D,MArB6D,IAAA;AAsB7D,MAtB6D,KAAA;AAuB7D,MAvB6D,KAAA;AAwB7D,MAAI;AAxByD,CAA/D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nexport default function overlay(\n  elevation: number | Animated.Value = 1,\n  surfaceColor: string = DarkTheme.colors.surface\n) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor: string, elevation: number) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}